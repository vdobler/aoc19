package main

import (
	"fmt"
	"strconv"
	"strings"
)

var input = "3,225,1,225,6,6,1100,1,238,225,104,0,1002,114,46,224,1001,224,-736,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1,166,195,224,1001,224,-137,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1001,169,83,224,1001,224,-90,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,101,44,117,224,101,-131,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,80,17,225,1101,56,51,225,1101,78,89,225,1102,48,16,225,1101,87,78,225,1102,34,33,224,101,-1122,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,66,53,224,101,-119,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,51,49,225,1101,7,15,225,2,110,106,224,1001,224,-4539,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,88,78,225,102,78,101,224,101,-6240,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,226,677,224,102,2,223,223,1006,224,329,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,374,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,404,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,434,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,449,1001,223,1,223,1107,677,677,224,102,2,223,223,1005,224,464,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,108,677,226,224,102,2,223,223,1005,224,509,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,524,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,569,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,584,101,1,223,223,1108,677,677,224,102,2,223,223,1006,224,599,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,8,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226"

type Prog struct {
	Input []int
	IC    int

	Output []int

	Mem []int
	PC  int
}

type mode int

const (
	modePos = mode(0)
	modeImd = mode(1)
)

func (p *Prog) InsDec() (opcode int, mode1 mode, mode2 mode, mode3 mode) {
	v := p.Mem[p.PC]
	opcode = v % 100

	v /= 100
	mode1 = mode(v % 10)
	v /= 10
	mode2 = mode(v % 10)
	v /= 10
	mode3 = mode(v % 10)

	return
}

func (p *Prog) Load(addr int, m mode) int {
	arg := p.Mem[addr]
	switch m {
	case modePos:
		return p.Mem[arg]
	case modeImd:
		return arg
	default:
		panic(m)
	}
}

func (p *Prog) Store(v int, addr int, m mode) {
	arg := p.Mem[addr]
	switch m {
	case modePos:
		p.Mem[arg] = v
	case modeImd:
		panic(m)
	default:
		panic(m)
	}
}

func (p *Prog) Debug() {
	fmt.Printf("PC = %d,  Mem = %v\n", p.PC, p.Mem)
}

func (p *Prog) Step() bool {
	// p.Debug()
	op, m1, m2, m3 := p.InsDec()
	switch op {
	case 1: // Add
		sum := p.Load(p.PC+1, m1) + p.Load(p.PC+2, m2)
		p.Store(sum, p.PC+3, m3)
		p.PC += 4
	case 2: // Mul
		prod := p.Load(p.PC+1, m1) * p.Load(p.PC+2, m2)
		p.Store(prod, p.PC+3, m3)
		p.PC += 4
	case 3: // Input
		p.Store(p.Input[p.IC], p.PC+1, m1)
		p.IC++
		p.PC += 2
	case 4: // Output
		p.Output = append(p.Output, p.Load(p.PC+1, m1))
		p.PC += 2
	case 5: // JumpNZ
		if p.Load(p.PC+1, m1) != 0 {
			p.PC = p.Load(p.PC+2, m2)
		} else {
			p.PC += 3
		}
	case 6: // JumpZ
		if p.Load(p.PC+1, m1) == 0 {
			p.PC = p.Load(p.PC+2, m2)
		} else {
			p.PC += 3
		}
	case 7: // Less
		v := 0
		if p.Load(p.PC+1, m1) < p.Load(p.PC+2, m2) {
			v = 1
		}
		p.Store(v, p.PC+3, m3)
		p.PC += 4
	case 8: // Equal
		v := 0
		if p.Load(p.PC+1, m1) == p.Load(p.PC+2, m2) {
			v = 1
		}
		p.Store(v, p.PC+3, m3)
		p.PC += 4
	case 99:
		return false
	default:
		panic(op)
	}

	return true
}

func (p *Prog) Run(input []int) {
	p.Input = input
	for p.Step() {
	}
}

func NewProg(raw string) *Prog {
	nums := strings.Split(raw, ",")
	p := &Prog{
		Mem: make([]int, len(nums)),
	}

	for i, s := range nums {
		v, err := strconv.Atoi(s)
		if err != nil {
			panic(err)
		}
		p.Mem[i] = v
	}

	return p
}

func main() {
	src := input
	// src = "1002,4,3,4,33"
	prog := NewProg(src)
	prog.Run([]int{1})
	fmt.Println(prog.Output)
	fmt.Println("Day 06, Part 1: ", prog.Output[len(prog.Output)-1])
	fmt.Println()

	prog = NewProg(src)
	prog.Run([]int{5})
	fmt.Println(prog.Output[0])
}
